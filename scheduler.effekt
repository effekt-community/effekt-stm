/// Taken from the Scheduler case study:
/// https://effekt-lang.org/docs/casestudies/scheduler
module scheduler

import dequeue

effect yield(): Unit

interface Fork {
  def fork(): Bool
  def exit(): Unit
}

effect Proc = {yield, Fork}

def scheduler { prog: => Unit / Proc } = region this {
  var queue: Dequeue[() => Unit at {this, prog}] in this = emptyQueue();

  def run(): Unit = queue.popBack match {
    case None() => ()
    case Some((k, q)) =>
      queue = q
      k();
      run()
  }

  try {
    prog()
  } with yield {
    queue = queue.pushFront(box { resume(()) })
  } with Fork {
    def fork() = {
      queue = queue
        .pushFront(box { resume(true) })
        .pushFront(box { resume(false) })
    }
    def exit() = ()
  }

  run()
}

def fork { b1: => Unit / Proc } { b2: => Unit / Proc } =
  if (do fork()) { b1() } else { b2() }


def schedulerTest() = scheduler {
    fork {
      do yield()
      println("Hello1")
    } {
      println("Hello2")
    }
  }
